{"ast":null,"code":"import _classCallCheck from \"C:/Users/vatsa/Downloads/React-Portfolio-master/React-Portfolio-master/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vatsa/Downloads/React-Portfolio-master/React-Portfolio-master/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getRandom, getRangeValue, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport var LifeUpdater = /*#__PURE__*/function () {\n  function LifeUpdater(container) {\n    _classCallCheck(this, LifeUpdater);\n    this.container = container;\n  }\n  _createClass(LifeUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var container = this.container,\n        particlesOptions = particle.options,\n        lifeOptions = particlesOptions.life;\n      if (!lifeOptions) {\n        return;\n      }\n      particle.life = {\n        delay: container.retina.reduceFactor ? getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom()) / container.retina.reduceFactor * 1000 : 0,\n        delayTime: 0,\n        duration: container.retina.reduceFactor ? getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom()) / container.retina.reduceFactor * 1000 : 0,\n        time: 0,\n        count: lifeOptions.count\n      };\n      if (particle.life.duration <= 0) {\n        particle.life.duration = -1;\n      }\n      if (particle.life.count <= 0) {\n        particle.life.count = -1;\n      }\n      if (particle.life) {\n        particle.spawning = particle.life.delay > 0;\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return !particle.destroyed;\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options) {\n      if (!options.life) {\n        options.life = new Life();\n      }\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n        options.life.load(source === null || source === void 0 ? void 0 : source.life);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle) || !particle.life) {\n        return;\n      }\n      var life = particle.life;\n      var justSpawned = false;\n      if (particle.spawning) {\n        life.delayTime += delta.value;\n        if (life.delayTime >= particle.life.delay) {\n          justSpawned = true;\n          particle.spawning = false;\n          life.delayTime = 0;\n          life.time = 0;\n        } else {\n          return;\n        }\n      }\n      if (life.duration === -1) {\n        return;\n      }\n      if (particle.spawning) {\n        return;\n      }\n      if (justSpawned) {\n        life.time = 0;\n      } else {\n        life.time += delta.value;\n      }\n      if (life.time < life.duration) {\n        return;\n      }\n      life.time = 0;\n      if (particle.life.count > 0) {\n        particle.life.count--;\n      }\n      if (particle.life.count === 0) {\n        particle.destroy();\n        return;\n      }\n      var canvasSize = this.container.canvas.size,\n        widthRange = setRangeValue(0, canvasSize.width),\n        heightRange = setRangeValue(0, canvasSize.width);\n      particle.position.x = randomInRange(widthRange);\n      particle.position.y = randomInRange(heightRange);\n      particle.spawning = true;\n      life.delayTime = 0;\n      life.time = 0;\n      particle.reset();\n      var lifeOptions = particle.options.life;\n      if (lifeOptions) {\n        life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n        life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n      }\n    }\n  }]);\n  return LifeUpdater;\n}();","map":{"version":3,"names":["getRandom","getRangeValue","randomInRange","setRangeValue","Life","LifeUpdater","container","particle","particlesOptions","options","lifeOptions","life","delay","retina","reduceFactor","value","sync","delayTime","duration","time","count","spawning","destroyed","sources","source","load","delta","isEnabled","justSpawned","destroy","canvasSize","canvas","size","widthRange","width","heightRange","position","x","y","reset"],"sources":["C:/Users/vatsa/Downloads/React-Portfolio-master/React-Portfolio-master/node_modules/tsparticles-updater-life/esm/LifeUpdater.js"],"sourcesContent":["import { getRandom, getRangeValue, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= 0) {\n            particle.life.duration = -1;\n        }\n        if (particle.life.count <= 0) {\n            particle.life.count = -1;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > 0;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source === null || source === void 0 ? void 0 : source.life);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        const life = particle.life;\n        let justSpawned = false;\n        if (particle.spawning) {\n            life.delayTime += delta.value;\n            if (life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                life.delayTime = 0;\n                life.time = 0;\n            }\n            else {\n                return;\n            }\n        }\n        if (life.duration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            life.time = 0;\n        }\n        else {\n            life.time += delta.value;\n        }\n        if (life.time < life.duration) {\n            return;\n        }\n        life.time = 0;\n        if (particle.life.count > 0) {\n            particle.life.count--;\n        }\n        if (particle.life.count === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size, widthRange = setRangeValue(0, canvasSize.width), heightRange = setRangeValue(0, canvasSize.width);\n        particle.position.x = randomInRange(widthRange);\n        particle.position.y = randomInRange(heightRange);\n        particle.spawning = true;\n        life.delayTime = 0;\n        life.time = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        if (lifeOptions) {\n            life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n            life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}