{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nvar NetworkFirst = /*#__PURE__*/function () {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   * @param {number} options.networkTimeoutSeconds If set, any network requests\n   * that fail to respond within the timeout will fallback to the cache.\n   *\n   * This option can be used to combat\n   * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n   * scenarios.\n   */\n  function NetworkFirst() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, NetworkFirst);\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    if (options.plugins) {\n      var isUsingCacheWillUpdate = options.plugins.some(function (plugin) {\n        return !!plugin.cacheWillUpdate;\n      });\n      this._plugins = isUsingCacheWillUpdate ? options.plugins : [cacheOkAndOpaquePlugin].concat(_toConsumableArray(options.plugins));\n    } else {\n      // No plugins passed in, use the default plugin.\n      this._plugins = [cacheOkAndOpaquePlugin];\n    }\n    this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    if (process.env.NODE_ENV !== 'production') {\n      if (this._networkTimeoutSeconds) {\n        assert.isType(this._networkTimeoutSeconds, 'number', {\n          moduleName: 'workbox-strategies',\n          className: 'NetworkFirst',\n          funcName: 'constructor',\n          paramName: 'networkTimeoutSeconds'\n        });\n      }\n    }\n    this._fetchOptions = options.fetchOptions;\n    this._matchOptions = options.matchOptions;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link module:workbox-routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request A request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n  _createClass(NetworkFirst, [{\n    key: \"handle\",\n    value: function () {\n      var _handle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n        var event, request, logs, promises, timeoutId, _this$_getTimeoutProm, id, promise, networkPromise, response, _iterator, _step, log;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event = _ref.event, request = _ref.request;\n                logs = [];\n                if (typeof request === 'string') {\n                  request = new Request(request);\n                }\n                if (process.env.NODE_ENV !== 'production') {\n                  assert.isInstance(request, Request, {\n                    moduleName: 'workbox-strategies',\n                    className: 'NetworkFirst',\n                    funcName: 'handle',\n                    paramName: 'makeRequest'\n                  });\n                }\n                promises = [];\n                if (this._networkTimeoutSeconds) {\n                  _this$_getTimeoutProm = this._getTimeoutPromise({\n                    request: request,\n                    event: event,\n                    logs: logs\n                  }), id = _this$_getTimeoutProm.id, promise = _this$_getTimeoutProm.promise;\n                  timeoutId = id;\n                  promises.push(promise);\n                }\n                networkPromise = this._getNetworkPromise({\n                  timeoutId: timeoutId,\n                  request: request,\n                  event: event,\n                  logs: logs\n                });\n                promises.push(networkPromise);\n                // Promise.race() will resolve as soon as the first promise resolves.\n                _context.next = 10;\n                return Promise.race(promises);\n              case 10:\n                response = _context.sent;\n                if (response) {\n                  _context.next = 15;\n                  break;\n                }\n                _context.next = 14;\n                return networkPromise;\n              case 14:\n                response = _context.sent;\n              case 15:\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.groupCollapsed(messages.strategyStart('NetworkFirst', request));\n                  _iterator = _createForOfIteratorHelper(logs);\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      log = _step.value;\n                      logger.log(log);\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n                  messages.printFinalResponse(response);\n                  logger.groupEnd();\n                }\n                if (response) {\n                  _context.next = 18;\n                  break;\n                }\n                throw new WorkboxError('no-response', {\n                  url: request.url\n                });\n              case 18:\n                return _context.abrupt(\"return\", response);\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function handle(_x) {\n        return _handle.apply(this, arguments);\n      }\n      return handle;\n    }()\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n  }, {\n    key: \"_getTimeoutPromise\",\n    value: function _getTimeoutPromise(_ref2) {\n      var _this = this;\n      var request = _ref2.request,\n        logs = _ref2.logs,\n        event = _ref2.event;\n      var timeoutId;\n      var timeoutPromise = new Promise(function (resolve) {\n        var onNetworkTimeout = /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n            return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    if (process.env.NODE_ENV !== 'production') {\n                      logs.push(\"Timing out the network response at \" + \"\".concat(_this._networkTimeoutSeconds, \" seconds.\"));\n                    }\n                    _context2.t0 = resolve;\n                    _context2.next = 4;\n                    return _this._respondFromCache({\n                      request: request,\n                      event: event\n                    });\n                  case 4:\n                    _context2.t1 = _context2.sent;\n                    (0, _context2.t0)(_context2.t1);\n                  case 6:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n          return function onNetworkTimeout() {\n            return _ref3.apply(this, arguments);\n          };\n        }();\n        timeoutId = setTimeout(onNetworkTimeout, _this._networkTimeoutSeconds * 1000);\n      });\n      return {\n        promise: timeoutPromise,\n        id: timeoutId\n      };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n  }, {\n    key: \"_getNetworkPromise\",\n    value: function () {\n      var _getNetworkPromise2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref4) {\n        var timeoutId, request, logs, event, error, response, responseClone, cachePut;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                timeoutId = _ref4.timeoutId, request = _ref4.request, logs = _ref4.logs, event = _ref4.event;\n                _context3.prev = 1;\n                _context3.next = 4;\n                return fetchWrapper.fetch({\n                  request: request,\n                  event: event,\n                  fetchOptions: this._fetchOptions,\n                  plugins: this._plugins\n                });\n              case 4:\n                response = _context3.sent;\n                _context3.next = 10;\n                break;\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](1);\n                error = _context3.t0;\n              case 10:\n                if (timeoutId) {\n                  clearTimeout(timeoutId);\n                }\n                if (process.env.NODE_ENV !== 'production') {\n                  if (response) {\n                    logs.push(\"Got response from network.\");\n                  } else {\n                    logs.push(\"Unable to get a response from the network. Will respond \" + \"with a cached response.\");\n                  }\n                }\n                if (!(error || !response)) {\n                  _context3.next = 19;\n                  break;\n                }\n                _context3.next = 15;\n                return this._respondFromCache({\n                  request: request,\n                  event: event\n                });\n              case 15:\n                response = _context3.sent;\n                if (process.env.NODE_ENV !== 'production') {\n                  if (response) {\n                    logs.push(\"Found a cached response in the '\".concat(this._cacheName, \"'\") + \" cache.\");\n                  } else {\n                    logs.push(\"No response found in the '\".concat(this._cacheName, \"' cache.\"));\n                  }\n                }\n                _context3.next = 22;\n                break;\n              case 19:\n                // Keep the service worker alive while we put the request in the cache\n                responseClone = response.clone();\n                cachePut = cacheWrapper.put({\n                  cacheName: this._cacheName,\n                  request: request,\n                  response: responseClone,\n                  event: event,\n                  plugins: this._plugins\n                });\n                if (event) {\n                  try {\n                    // The event has been responded to so we can keep the SW alive to\n                    // respond to the request\n                    event.waitUntil(cachePut);\n                  } catch (err) {\n                    if (process.env.NODE_ENV !== 'production') {\n                      logger.warn(\"Unable to ensure service worker stays alive when \" + \"updating cache for '\".concat(getFriendlyURL(request.url), \"'.\"));\n                    }\n                  }\n                }\n              case 22:\n                return _context3.abrupt(\"return\", response);\n              case 23:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 7]]);\n      }));\n      function _getNetworkPromise(_x2) {\n        return _getNetworkPromise2.apply(this, arguments);\n      }\n      return _getNetworkPromise;\n    }()\n    /**\n     * Used if the network timeouts or fails to make the request.\n     *\n     * @param {Object} options\n     * @param {Request} request The request to match in the cache\n     * @param {Event} [options.event]\n     * @return {Promise<Object>}\n     *\n     * @private\n     */\n  }, {\n    key: \"_respondFromCache\",\n    value: function _respondFromCache(_ref5) {\n      var event = _ref5.event,\n        request = _ref5.request;\n      return cacheWrapper.match({\n        cacheName: this._cacheName,\n        request: request,\n        event: event,\n        matchOptions: this._matchOptions,\n        plugins: this._plugins\n      });\n    }\n  }]);\n  return NetworkFirst;\n}();\nexport { NetworkFirst };","map":{"version":3,"names":["assert","cacheNames","cacheWrapper","fetchWrapper","getFriendlyURL","logger","WorkboxError","messages","cacheOkAndOpaquePlugin","NetworkFirst","options","_cacheName","getRuntimeName","cacheName","plugins","isUsingCacheWillUpdate","some","plugin","cacheWillUpdate","_plugins","_networkTimeoutSeconds","networkTimeoutSeconds","process","env","NODE_ENV","isType","moduleName","className","funcName","paramName","_fetchOptions","fetchOptions","_matchOptions","matchOptions","event","request","logs","Request","isInstance","promises","_getTimeoutPromise","id","promise","timeoutId","push","networkPromise","_getNetworkPromise","Promise","race","response","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url","timeoutPromise","resolve","onNetworkTimeout","_respondFromCache","setTimeout","fetch","error","clearTimeout","responseClone","clone","cachePut","put","waitUntil","err","warn","match"],"sources":["C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/workbox-strategies/NetworkFirst.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass NetworkFirst {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} options.networkTimeoutSeconds If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        if (options.plugins) {\n            const isUsingCacheWillUpdate = options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n            this._plugins = isUsingCacheWillUpdate ?\n                options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n        }\n        else {\n            // No plugins passed in, use the default plugin.\n            this._plugins = [cacheOkAndOpaquePlugin];\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: 'NetworkFirst',\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'NetworkFirst',\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, event, logs });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({ timeoutId, request, event, logs });\n        promises.push(networkPromise);\n        // Promise.race() will resolve as soon as the first promise resolves.\n        let response = await Promise.race(promises);\n        // If Promise.race() resolved with null, it might be due to a network\n        // timeout + a cache miss. If that were to happen, we'd rather wait until\n        // the networkPromise resolves instead of returning null.\n        // Note that it's fine to await an already-resolved promise, so we don't\n        // have to check to see if it's still \"in flight\".\n        if (!response) {\n            response = await networkPromise;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('NetworkFirst', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, event }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await this._respondFromCache({ request, event }));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, event }) {\n        let error;\n        let response;\n        try {\n            response = await fetchWrapper.fetch({\n                request,\n                event,\n                fetchOptions: this._fetchOptions,\n                plugins: this._plugins,\n            });\n        }\n        catch (err) {\n            error = err;\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await this._respondFromCache({ request, event });\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this._cacheName}'` +\n                        ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this._cacheName}' cache.`);\n                }\n            }\n        }\n        else {\n            // Keep the service worker alive while we put the request in the cache\n            const responseClone = response.clone();\n            const cachePut = cacheWrapper.put({\n                cacheName: this._cacheName,\n                request,\n                response: responseClone,\n                event,\n                plugins: this._plugins,\n            });\n            if (event) {\n                try {\n                    // The event has been responded to so we can keep the SW alive to\n                    // respond to the request\n                    event.waitUntil(cachePut);\n                }\n                catch (err) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.warn(`Unable to ensure service worker stays alive when ` +\n                            `updating cache for '${getFriendlyURL(request.url)}'.`);\n                    }\n                }\n            }\n        }\n        return response;\n    }\n    /**\n     * Used if the network timeouts or fails to make the request.\n     *\n     * @param {Object} options\n     * @param {Request} request The request to match in the cache\n     * @param {Event} [options.event]\n     * @return {Promise<Object>}\n     *\n     * @private\n     */\n    _respondFromCache({ event, request }) {\n        return cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n    }\n}\nexport { NetworkFirst };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}