{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from './WorkboxError.js';\nimport { logger } from './logger.js';\nimport { assert } from './assert.js';\nimport { getFriendlyURL } from '../_private/getFriendlyURL.js';\nimport { pluginUtils } from '../utils/pluginUtils.js';\nimport '../_version.js';\n/**\n * Wrapper around the fetch API.\n *\n * Will call requestWillFetch on available plugins.\n *\n * @param {Object} options\n * @param {Request|string} options.request\n * @param {Object} [options.fetchOptions]\n * @param {ExtendableEvent} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\nvar wrappedFetch = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n    var request, fetchOptions, event, _ref$plugins, plugins, possiblePreloadResponse, failedFetchPlugins, originalRequest, _iterator, _step, plugin, pluginMethod, requestClone, pluginFilteredRequest, fetchResponse, _iterator2, _step2, _plugin, _iterator3, _step3, _plugin2;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            request = _ref.request, fetchOptions = _ref.fetchOptions, event = _ref.event, _ref$plugins = _ref.plugins, plugins = _ref$plugins === void 0 ? [] : _ref$plugins;\n            if (typeof request === 'string') {\n              request = new Request(request);\n            }\n            // We *should* be able to call `await event.preloadResponse` even if it's\n            // undefined, but for some reason, doing so leads to errors in our Node unit\n            // tests. To work around that, explicitly check preloadResponse's value first.\n            if (!(event instanceof FetchEvent && event.preloadResponse)) {\n              _context.next = 9;\n              break;\n            }\n            _context.next = 5;\n            return event.preloadResponse;\n          case 5:\n            possiblePreloadResponse = _context.sent;\n            if (!possiblePreloadResponse) {\n              _context.next = 9;\n              break;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n              logger.log(\"Using a preloaded navigation response for \" + \"'\".concat(getFriendlyURL(request.url), \"'\"));\n            }\n            return _context.abrupt(\"return\", possiblePreloadResponse);\n          case 9:\n            if (process.env.NODE_ENV !== 'production') {\n              assert.isInstance(request, Request, {\n                paramName: 'request',\n                expectedClass: Request,\n                moduleName: 'workbox-core',\n                className: 'fetchWrapper',\n                funcName: 'wrappedFetch'\n              });\n            }\n            failedFetchPlugins = pluginUtils.filter(plugins, \"fetchDidFail\" /* FETCH_DID_FAIL */); // If there is a fetchDidFail plugin, we need to save a clone of the\n            // original request before it's either modified by a requestWillFetch\n            // plugin or before the original request's body is consumed via fetch().\n            originalRequest = failedFetchPlugins.length > 0 ? request.clone() : null;\n            _context.prev = 12;\n            _iterator = _createForOfIteratorHelper(plugins);\n            _context.prev = 14;\n            _iterator.s();\n          case 16:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 27;\n              break;\n            }\n            plugin = _step.value;\n            if (!(\"requestWillFetch\" /* REQUEST_WILL_FETCH */ in plugin)) {\n              _context.next = 25;\n              break;\n            }\n            pluginMethod = plugin[\"requestWillFetch\" /* REQUEST_WILL_FETCH */];\n            requestClone = request.clone();\n            _context.next = 23;\n            return pluginMethod.call(plugin, {\n              request: requestClone,\n              event: event\n            });\n          case 23:\n            request = _context.sent;\n            if (process.env.NODE_ENV !== 'production') {\n              if (request) {\n                assert.isInstance(request, Request, {\n                  moduleName: 'Plugin',\n                  funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\n                  isReturnValueProblem: true\n                });\n              }\n            }\n          case 25:\n            _context.next = 16;\n            break;\n          case 27:\n            _context.next = 32;\n            break;\n          case 29:\n            _context.prev = 29;\n            _context.t0 = _context[\"catch\"](14);\n            _iterator.e(_context.t0);\n          case 32:\n            _context.prev = 32;\n            _iterator.f();\n            return _context.finish(32);\n          case 35:\n            _context.next = 40;\n            break;\n          case 37:\n            _context.prev = 37;\n            _context.t1 = _context[\"catch\"](12);\n            throw new WorkboxError('plugin-error-request-will-fetch', {\n              thrownError: _context.t1\n            });\n          case 40:\n            // The request can be altered by plugins with `requestWillFetch` making\n            // the original request (Most likely from a `fetch` event) to be different\n            // to the Request we make. Pass both to `fetchDidFail` to aid debugging.\n            pluginFilteredRequest = request.clone();\n            _context.prev = 41;\n            if (!(request.mode === 'navigate')) {\n              _context.next = 48;\n              break;\n            }\n            _context.next = 45;\n            return fetch(request);\n          case 45:\n            fetchResponse = _context.sent;\n            _context.next = 51;\n            break;\n          case 48:\n            _context.next = 50;\n            return fetch(request, fetchOptions);\n          case 50:\n            fetchResponse = _context.sent;\n          case 51:\n            if (process.env.NODE_ENV !== 'production') {\n              logger.debug(\"Network request for \" + \"'\".concat(getFriendlyURL(request.url), \"' returned a response with \") + \"status '\".concat(fetchResponse.status, \"'.\"));\n            }\n            _iterator2 = _createForOfIteratorHelper(plugins);\n            _context.prev = 53;\n            _iterator2.s();\n          case 55:\n            if ((_step2 = _iterator2.n()).done) {\n              _context.next = 64;\n              break;\n            }\n            _plugin = _step2.value;\n            if (!(\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */ in _plugin)) {\n              _context.next = 62;\n              break;\n            }\n            _context.next = 60;\n            return _plugin[\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */].call(_plugin, {\n              event: event,\n              request: pluginFilteredRequest,\n              response: fetchResponse\n            });\n          case 60:\n            fetchResponse = _context.sent;\n            if (process.env.NODE_ENV !== 'production') {\n              if (fetchResponse) {\n                assert.isInstance(fetchResponse, Response, {\n                  moduleName: 'Plugin',\n                  funcName: \"fetchDidSucceed\" /* FETCH_DID_SUCCEED */,\n                  isReturnValueProblem: true\n                });\n              }\n            }\n          case 62:\n            _context.next = 55;\n            break;\n          case 64:\n            _context.next = 69;\n            break;\n          case 66:\n            _context.prev = 66;\n            _context.t2 = _context[\"catch\"](53);\n            _iterator2.e(_context.t2);\n          case 69:\n            _context.prev = 69;\n            _iterator2.f();\n            return _context.finish(69);\n          case 72:\n            return _context.abrupt(\"return\", fetchResponse);\n          case 75:\n            _context.prev = 75;\n            _context.t3 = _context[\"catch\"](41);\n            if (process.env.NODE_ENV !== 'production') {\n              logger.error(\"Network request for \" + \"'\".concat(getFriendlyURL(request.url), \"' threw an error.\"), _context.t3);\n            }\n            _iterator3 = _createForOfIteratorHelper(failedFetchPlugins);\n            _context.prev = 79;\n            _iterator3.s();\n          case 81:\n            if ((_step3 = _iterator3.n()).done) {\n              _context.next = 87;\n              break;\n            }\n            _plugin2 = _step3.value;\n            _context.next = 85;\n            return _plugin2[\"fetchDidFail\" /* FETCH_DID_FAIL */].call(_plugin2, {\n              error: _context.t3,\n              event: event,\n              originalRequest: originalRequest.clone(),\n              request: pluginFilteredRequest.clone()\n            });\n          case 85:\n            _context.next = 81;\n            break;\n          case 87:\n            _context.next = 92;\n            break;\n          case 89:\n            _context.prev = 89;\n            _context.t4 = _context[\"catch\"](79);\n            _iterator3.e(_context.t4);\n          case 92:\n            _context.prev = 92;\n            _iterator3.f();\n            return _context.finish(92);\n          case 95:\n            throw _context.t3;\n          case 96:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[12, 37], [14, 29, 32, 35], [41, 75], [53, 66, 69, 72], [79, 89, 92, 95]]);\n  }));\n  return function wrappedFetch(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar fetchWrapper = {\n  fetch: wrappedFetch\n};\nexport { fetchWrapper };","map":{"version":3,"names":["WorkboxError","logger","assert","getFriendlyURL","pluginUtils","wrappedFetch","request","fetchOptions","event","plugins","Request","FetchEvent","preloadResponse","possiblePreloadResponse","process","env","NODE_ENV","log","url","isInstance","paramName","expectedClass","moduleName","className","funcName","failedFetchPlugins","filter","originalRequest","length","clone","plugin","pluginMethod","requestClone","call","isReturnValueProblem","thrownError","pluginFilteredRequest","mode","fetch","fetchResponse","debug","status","response","Response","error","fetchWrapper"],"sources":["C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/workbox-core/_private/fetchWrapper.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from './WorkboxError.js';\nimport { logger } from './logger.js';\nimport { assert } from './assert.js';\nimport { getFriendlyURL } from '../_private/getFriendlyURL.js';\nimport { pluginUtils } from '../utils/pluginUtils.js';\nimport '../_version.js';\n/**\n * Wrapper around the fetch API.\n *\n * Will call requestWillFetch on available plugins.\n *\n * @param {Object} options\n * @param {Request|string} options.request\n * @param {Object} [options.fetchOptions]\n * @param {ExtendableEvent} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst wrappedFetch = async ({ request, fetchOptions, event, plugins = [], }) => {\n    if (typeof request === 'string') {\n        request = new Request(request);\n    }\n    // We *should* be able to call `await event.preloadResponse` even if it's\n    // undefined, but for some reason, doing so leads to errors in our Node unit\n    // tests. To work around that, explicitly check preloadResponse's value first.\n    if (event instanceof FetchEvent && event.preloadResponse) {\n        const possiblePreloadResponse = await event.preloadResponse;\n        if (possiblePreloadResponse) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Using a preloaded navigation response for ` +\n                    `'${getFriendlyURL(request.url)}'`);\n            }\n            return possiblePreloadResponse;\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isInstance(request, Request, {\n            paramName: 'request',\n            expectedClass: Request,\n            moduleName: 'workbox-core',\n            className: 'fetchWrapper',\n            funcName: 'wrappedFetch',\n        });\n    }\n    const failedFetchPlugins = pluginUtils.filter(plugins, \"fetchDidFail\" /* FETCH_DID_FAIL */);\n    // If there is a fetchDidFail plugin, we need to save a clone of the\n    // original request before it's either modified by a requestWillFetch\n    // plugin or before the original request's body is consumed via fetch().\n    const originalRequest = failedFetchPlugins.length > 0 ?\n        request.clone() : null;\n    try {\n        for (const plugin of plugins) {\n            if (\"requestWillFetch\" /* REQUEST_WILL_FETCH */ in plugin) {\n                const pluginMethod = plugin[\"requestWillFetch\" /* REQUEST_WILL_FETCH */];\n                const requestClone = request.clone();\n                request = await pluginMethod.call(plugin, {\n                    request: requestClone,\n                    event,\n                });\n                if (process.env.NODE_ENV !== 'production') {\n                    if (request) {\n                        assert.isInstance(request, Request, {\n                            moduleName: 'Plugin',\n                            funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\n                            isReturnValueProblem: true,\n                        });\n                    }\n                }\n            }\n        }\n    }\n    catch (err) {\n        throw new WorkboxError('plugin-error-request-will-fetch', {\n            thrownError: err,\n        });\n    }\n    // The request can be altered by plugins with `requestWillFetch` making\n    // the original request (Most likely from a `fetch` event) to be different\n    // to the Request we make. Pass both to `fetchDidFail` to aid debugging.\n    const pluginFilteredRequest = request.clone();\n    try {\n        let fetchResponse;\n        // See https://github.com/GoogleChrome/workbox/issues/1796\n        if (request.mode === 'navigate') {\n            fetchResponse = await fetch(request);\n        }\n        else {\n            fetchResponse = await fetch(request, fetchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Network request for ` +\n                `'${getFriendlyURL(request.url)}' returned a response with ` +\n                `status '${fetchResponse.status}'.`);\n        }\n        for (const plugin of plugins) {\n            if (\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */ in plugin) {\n                fetchResponse = await plugin[\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */]\n                    .call(plugin, {\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n                if (process.env.NODE_ENV !== 'production') {\n                    if (fetchResponse) {\n                        assert.isInstance(fetchResponse, Response, {\n                            moduleName: 'Plugin',\n                            funcName: \"fetchDidSucceed\" /* FETCH_DID_SUCCEED */,\n                            isReturnValueProblem: true,\n                        });\n                    }\n                }\n            }\n        }\n        return fetchResponse;\n    }\n    catch (error) {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.error(`Network request for ` +\n                `'${getFriendlyURL(request.url)}' threw an error.`, error);\n        }\n        for (const plugin of failedFetchPlugins) {\n            await plugin[\"fetchDidFail\" /* FETCH_DID_FAIL */].call(plugin, {\n                error,\n                event,\n                originalRequest: originalRequest.clone(),\n                request: pluginFilteredRequest.clone(),\n            });\n        }\n        throw error;\n    }\n};\nconst fetchWrapper = {\n    fetch: wrappedFetch,\n};\nexport { fetchWrapper };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}