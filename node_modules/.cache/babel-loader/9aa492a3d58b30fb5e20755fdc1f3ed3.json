{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./utils\";\nimport { deepExtend, getDistance, getDistances, getRandom, itemFromArray } from \"tsparticles-engine\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nvar noPolygonDataLoaded = \"No polygon data loaded.\",\n  noPolygonFound = \"No polygon found, you need to specify SVG url in config.\";\nexport var PolygonMaskInstance = /*#__PURE__*/function () {\n  function PolygonMaskInstance(container, engine) {\n    _classCallCheck(this, PolygonMaskInstance);\n    this._container = container;\n    this._engine = engine;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask();\n    this._polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n  _createClass(PolygonMaskInstance, [{\n    key: \"clickPositionValid\",\n    value: function clickPositionValid(position) {\n      var options = this.options;\n      return options.enable && options.type !== \"none\" && options.type !== \"inline\" && this.checkInsidePolygon(position);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _a;\n      if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      var options = this.options,\n        polygonDraw = options.draw;\n      if (!options.enable || !polygonDraw.enable) {\n        return;\n      }\n      var rawData = this.raw;\n      var _iterator = _createForOfIteratorHelper(this.paths),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var path = _step.value;\n          var path2d = path.path2d,\n            path2dSupported = this.path2DSupported;\n          if (!context) {\n            continue;\n          }\n          if (path2dSupported && path2d && this.offset) {\n            drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            drawPolygonMask(context, rawData, polygonDraw.stroke);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"initAsync\",\n    value: function () {\n      var _initAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        var polygonMaskOptions;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n                polygonMaskOptions = this.options;\n                this._polygonMaskMoveRadius = polygonMaskOptions.move.radius * this._container.retina.pixelRatio;\n                if (!polygonMaskOptions.enable) {\n                  _context.next = 6;\n                  break;\n                }\n                _context.next = 6;\n                return this.initRawData();\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function initAsync(_x) {\n        return _initAsync.apply(this, arguments);\n      }\n      return initAsync;\n    }()\n  }, {\n    key: \"particleBounce\",\n    value: function particleBounce(particle, delta, direction) {\n      return this.polygonBounce(particle, delta, direction);\n    }\n  }, {\n    key: \"particlePosition\",\n    value: function particlePosition(position) {\n      var _a, _b;\n      var options = this.options;\n      if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n        return;\n      }\n      return deepExtend({}, position ? position : this.randomPoint());\n    }\n  }, {\n    key: \"particlesInitialization\",\n    value: function particlesInitialization() {\n      var options = this.options;\n      if (options.enable && options.type === \"inline\" && (options.inline.arrangement === \"one-per-point\" || options.inline.arrangement === \"per-point\")) {\n        this.drawPoints();\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this = this;\n      var container = this._container,\n        options = this.options;\n      if (!(options.enable && options.type !== \"none\")) {\n        return;\n      }\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n      this.redrawTimeout = window.setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.initRawData(true);\n              case 2:\n                _context2.next = 4;\n                return container.particles.redraw();\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })), 250);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      delete this.raw;\n      delete this.paths;\n    }\n  }, {\n    key: \"checkInsidePolygon\",\n    value: function checkInsidePolygon(position) {\n      var _a, _b;\n      var container = this._container,\n        options = this.options;\n      if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n        return true;\n      }\n      if (!this.raw) {\n        throw new Error(noPolygonFound);\n      }\n      var canvasSize = container.canvas.size,\n        x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : getRandom() * canvasSize.width,\n        y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : getRandom() * canvasSize.height;\n      var inside = false;\n      for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        var pi = this.raw[i],\n          pj = this.raw[j],\n          intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n      return options.type === \"inside\" ? inside : options.type === \"outside\" ? !inside : false;\n    }\n  }, {\n    key: \"createPath2D\",\n    value: function createPath2D() {\n      var _this2 = this;\n      var _a, _b;\n      var options = this.options;\n      if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      var _iterator2 = _createForOfIteratorHelper(this.paths),\n        _step2;\n      try {\n        var _loop = function _loop() {\n          var path = _step2.value;\n          var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n          if (pathData) {\n            var path2d = new Path2D(pathData),\n              matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(),\n              finalPath = new Path2D(),\n              transform = matrix.scale(options.scale);\n            if (finalPath.addPath) {\n              finalPath.addPath(path2d, transform);\n              path.path2d = finalPath;\n            } else {\n              delete path.path2d;\n            }\n          } else {\n            delete path.path2d;\n          }\n          if (path.path2d || !_this2.raw) {\n            return \"continue\";\n          }\n          path.path2d = new Path2D();\n          path.path2d.moveTo(_this2.raw[0].x, _this2.raw[0].y);\n          _this2.raw.forEach(function (pos, i) {\n            var _a;\n            if (i > 0) {\n              (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n            }\n          });\n          path.path2d.closePath();\n        };\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _ret = _loop();\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"downloadSvgPath\",\n    value: function () {\n      var _downloadSvgPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(svgUrl, force) {\n        var options, url, forceDownload, req;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n                if (!(!url || this.paths !== undefined && !forceDownload)) {\n                  _context3.next = 3;\n                  break;\n                }\n                return _context3.abrupt(\"return\", this.raw);\n              case 3:\n                _context3.next = 5;\n                return fetch(url);\n              case 5:\n                req = _context3.sent;\n                if (req.ok) {\n                  _context3.next = 8;\n                  break;\n                }\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n              case 8:\n                _context3.t0 = this;\n                _context3.next = 11;\n                return req.text();\n              case 11:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = force;\n                return _context3.abrupt(\"return\", _context3.t0.parseSvgPath.call(_context3.t0, _context3.t1, _context3.t2));\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function downloadSvgPath(_x2, _x3) {\n        return _downloadSvgPath.apply(this, arguments);\n      }\n      return downloadSvgPath;\n    }()\n  }, {\n    key: \"drawPoints\",\n    value: function drawPoints() {\n      if (!this.raw) {\n        return;\n      }\n      var _iterator3 = _createForOfIteratorHelper(this.raw),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var item = _step3.value;\n          this._container.particles.addParticle({\n            x: item.x,\n            y: item.y\n          });\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"getEquidistantPointByIndex\",\n    value: function getEquidistantPointByIndex(index) {\n      var _a, _b, _c, _d, _e, _f, _g;\n      var options = this._container.actualOptions,\n        polygonMaskOptions = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(noPolygonDataLoaded);\n      var offset = 0,\n        point;\n      var totalLength = this.paths.reduce(function (tot, path) {\n          return tot + path.length;\n        }, 0),\n        distance = totalLength / options.particles.number.value;\n      var _iterator4 = _createForOfIteratorHelper(this.paths),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var path = _step4.value;\n          var pathDistance = distance * index - offset;\n          if (pathDistance <= path.length) {\n            point = path.element.getPointAtLength(pathDistance);\n            break;\n          } else {\n            offset += path.length;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return {\n        x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n        y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n      };\n    }\n  }, {\n    key: \"getPointByIndex\",\n    value: function getPointByIndex(index) {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(noPolygonDataLoaded);\n      }\n      var coords = this.raw[index % this.raw.length];\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPoint\",\n    value: function getRandomPoint() {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(noPolygonDataLoaded);\n      }\n      var coords = itemFromArray(this.raw);\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPointByLength\",\n    value: function getRandomPointByLength() {\n      var _a, _b, _c;\n      var options = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        throw new Error(noPolygonDataLoaded);\n      }\n      var path = itemFromArray(this.paths),\n        distance = Math.floor(getRandom() * path.length) + 1,\n        point = path.element.getPointAtLength(distance);\n      return {\n        x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n        y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n      };\n    }\n  }, {\n    key: \"initRawData\",\n    value: function () {\n      var _initRawData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(force) {\n        var options, data, svg, path, namespaces;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = this.options;\n                if (!options.url) {\n                  _context4.next = 7;\n                  break;\n                }\n                _context4.next = 4;\n                return this.downloadSvgPath(options.url, force);\n              case 4:\n                this.raw = _context4.sent;\n                _context4.next = 8;\n                break;\n              case 7:\n                if (options.data) {\n                  data = options.data;\n                  if (typeof data !== \"string\") {\n                    path = data.path instanceof Array ? data.path.map(function (t) {\n                      return \"<path d=\\\"\".concat(t, \"\\\" />\");\n                    }).join(\"\") : \"<path d=\\\"\".concat(data.path, \"\\\" />\");\n                    namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = \"<svg \".concat(namespaces, \" width=\\\"\").concat(data.size.width, \"\\\" height=\\\"\").concat(data.size.height, \"\\\">\").concat(path, \"</svg>\");\n                  } else {\n                    svg = data;\n                  }\n                  this.raw = this.parseSvgPath(svg, force);\n                }\n              case 8:\n                this.createPath2D();\n                this._engine.dispatchEvent(\"polygonMaskLoaded\", {\n                  container: this._container\n                });\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function initRawData(_x4) {\n        return _initRawData.apply(this, arguments);\n      }\n      return initRawData;\n    }()\n  }, {\n    key: \"parseSvgPath\",\n    value: function parseSvgPath(xml, force) {\n      var _a, _b, _c;\n      var forceDownload = force !== null && force !== void 0 ? force : false;\n      if (this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n      var container = this._container,\n        options = this.options,\n        parser = new DOMParser(),\n        doc = parser.parseFromString(xml, \"image/svg+xml\"),\n        svg = doc.getElementsByTagName(\"svg\")[0];\n      var svgPaths = svg.getElementsByTagName(\"path\");\n      if (!svgPaths.length) {\n        svgPaths = doc.getElementsByTagName(\"path\");\n      }\n      this.paths = [];\n      for (var i = 0; i < svgPaths.length; i++) {\n        var path = svgPaths.item(i);\n        if (path) {\n          this.paths.push({\n            element: path,\n            length: path.getTotalLength()\n          });\n        }\n      }\n      var pxRatio = container.retina.pixelRatio,\n        scale = options.scale / pxRatio;\n      this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n      this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n      var position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n        x: 50,\n        y: 50\n      };\n      this.offset = {\n        x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n        y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n      };\n      return parsePaths(this.paths, scale, this.offset);\n    }\n  }, {\n    key: \"polygonBounce\",\n    value: function polygonBounce(particle, _delta, direction) {\n      var options = this.options;\n      if (!this.raw || !options.enable || direction !== \"top\") {\n        return false;\n      }\n      if (options.type === \"inside\" || options.type === \"outside\") {\n        var closest, dx, dy;\n        var pos = particle.getPosition(),\n          radius = particle.getRadius();\n        for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n          var pi = this.raw[i],\n            pj = this.raw[j];\n          closest = calcClosestPtOnSegment(pi, pj, pos);\n          var dist = getDistances(pos, closest);\n          var _ref2 = [dist.dx, dist.dy];\n          dx = _ref2[0];\n          dy = _ref2[1];\n          if (dist.distance < radius) {\n            segmentBounce(pi, pj, particle.velocity);\n            return true;\n          }\n        }\n        if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n          var factor = {\n            x: 1,\n            y: 1\n          };\n          if (particle.position.x >= closest.x) {\n            factor.x = -1;\n          }\n          if (particle.position.y >= closest.y) {\n            factor.y = -1;\n          }\n          particle.position.x = closest.x + radius * 2 * factor.x;\n          particle.position.y = closest.y + radius * 2 * factor.y;\n          particle.velocity.mult(-1);\n          return true;\n        }\n      } else if (options.type === \"inline\" && particle.initialPosition) {\n        var _dist = getDistance(particle.initialPosition, particle.getPosition());\n        if (_dist > this._polygonMaskMoveRadius) {\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"randomPoint\",\n    value: function randomPoint() {\n      var container = this._container,\n        options = this.options;\n      var position;\n      if (options.type === \"inline\") {\n        switch (options.inline.arrangement) {\n          case \"random-point\":\n            position = this.getRandomPoint();\n            break;\n          case \"random-length\":\n            position = this.getRandomPointByLength();\n            break;\n          case \"equidistant\":\n            position = this.getEquidistantPointByIndex(container.particles.count);\n            break;\n          case \"one-per-point\":\n          case \"per-point\":\n          default:\n            position = this.getPointByIndex(container.particles.count);\n        }\n      } else {\n        position = {\n          x: getRandom() * container.canvas.size.width,\n          y: getRandom() * container.canvas.size.height\n        };\n      }\n      if (this.checkInsidePolygon(position)) {\n        return position;\n      } else {\n        return this.randomPoint();\n      }\n    }\n  }]);\n  return PolygonMaskInstance;\n}();","map":{"version":3,"names":["calcClosestPtOnSegment","drawPolygonMask","drawPolygonMaskPath","parsePaths","segmentBounce","deepExtend","getDistance","getDistances","getRandom","itemFromArray","PolygonMask","noPolygonDataLoaded","noPolygonFound","PolygonMaskInstance","container","engine","_container","_engine","dimension","height","width","path2DSupported","window","Path2D","options","_polygonMaskMoveRadius","move","radius","retina","pixelRatio","position","enable","type","checkInsidePolygon","context","_a","paths","length","polygonDraw","draw","rawData","raw","path","path2d","path2dSupported","offset","stroke","load","polygon","polygonMaskOptions","initRawData","particle","delta","direction","polygonBounce","_b","randomPoint","inline","arrangement","drawPoints","redrawTimeout","clearTimeout","setTimeout","particles","redraw","Error","canvasSize","canvas","size","x","y","inside","i","j","pi","pj","intersect","pathData","element","getAttribute","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","scale","addPath","moveTo","forEach","pos","lineTo","closePath","svgUrl","force","url","forceDownload","undefined","fetch","req","ok","text","parseSvgPath","item","addParticle","index","_c","_d","_e","_f","_g","actualOptions","point","totalLength","reduce","tot","distance","number","value","pathDistance","getPointAtLength","coords","Math","floor","downloadSvgPath","data","Array","map","t","join","namespaces","svg","createPath2D","dispatchEvent","xml","parser","DOMParser","doc","parseFromString","getElementsByTagName","svgPaths","push","getTotalLength","pxRatio","parseFloat","_delta","closest","dx","dy","getPosition","getRadius","dist","velocity","factor","mult","initialPosition","getRandomPoint","getRandomPointByLength","getEquidistantPointByIndex","count","getPointByIndex"],"sources":["C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/tsparticles-plugin-polygon-mask/esm/PolygonMaskInstance.js"],"sourcesContent":["import { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./utils\";\nimport { deepExtend, getDistance, getDistances, getRandom, itemFromArray } from \"tsparticles-engine\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nconst noPolygonDataLoaded = \"No polygon data loaded.\", noPolygonFound = \"No polygon found, you need to specify SVG url in config.\";\nexport class PolygonMaskInstance {\n    constructor(container, engine) {\n        this._container = container;\n        this._engine = engine;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask();\n        this._polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== \"none\" &&\n            options.type !== \"inline\" &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options, polygonDraw = options.draw;\n        if (!options.enable || !polygonDraw.enable) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d, path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                drawPolygonMask(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this._polygonMaskMoveRadius = polygonMaskOptions.move.radius * this._container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return deepExtend({}, position ? position : this.randomPoint());\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === \"inline\" &&\n            (options.inline.arrangement === \"one-per-point\" ||\n                options.inline.arrangement === \"per-point\")) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    resize() {\n        const container = this._container, options = this.options;\n        if (!(options.enable && options.type !== \"none\")) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            await container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this._container, options = this.options;\n        if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(noPolygonFound);\n        }\n        const canvasSize = container.canvas.size, x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : getRandom() * canvasSize.width, y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : getRandom() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i], pj = this.raw[j], intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === \"inside\"\n            ? inside\n            : options.type === \"outside\"\n                ? !inside\n                : false;\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData), matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(), finalPath = new Path2D(), transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this._container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this._container.actualOptions, polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(noPolygonDataLoaded);\n        let offset = 0, point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0), distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(noPolygonDataLoaded);\n        }\n        const coords = itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(noPolygonDataLoaded);\n        }\n        const path = itemFromArray(this.paths), distance = Math.floor(getRandom() * path.length) + 1, point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n        this._engine.dispatchEvent(\"polygonMaskLoaded\", {\n            container: this._container,\n        });\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this._container, options = this.options, parser = new DOMParser(), doc = parser.parseFromString(xml, \"image/svg+xml\"), svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio, scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return parsePaths(this.paths, scale, this.offset);\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== \"top\") {\n            return false;\n        }\n        if (options.type === \"inside\" || options.type === \"outside\") {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = calcClosestPtOnSegment(pi, pj, pos);\n                const dist = getDistances(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    segmentBounce(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === \"inline\" && particle.initialPosition) {\n            const dist = getDistance(particle.initialPosition, particle.getPosition());\n            if (dist > this._polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    randomPoint() {\n        const container = this._container, options = this.options;\n        let position;\n        if (options.type === \"inline\") {\n            switch (options.inline.arrangement) {\n                case \"random-point\":\n                    position = this.getRandomPoint();\n                    break;\n                case \"random-length\":\n                    position = this.getRandomPointByLength();\n                    break;\n                case \"equidistant\":\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case \"one-per-point\":\n                case \"per-point\":\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: getRandom() * container.canvas.size.width,\n                y: getRandom() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}