{"ast":null,"code":"import _classCallCheck from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getRandom, getRangeValue } from \"tsparticles-engine\";\nfunction updateAngle(particle, delta) {\n  var _a, _b;\n  var rotate = particle.rotate;\n  if (!rotate) {\n    return;\n  }\n  var rotateOptions = particle.options.rotate,\n    rotateAnimation = rotateOptions.animation,\n    speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor,\n    max = 2 * Math.PI,\n    decay = (_b = rotate.decay) !== null && _b !== void 0 ? _b : 1;\n  if (!rotateAnimation.enable) {\n    return;\n  }\n  switch (rotate.status) {\n    case 0:\n      rotate.value += speed;\n      if (rotate.value > max) {\n        rotate.value -= max;\n      }\n      break;\n    case 1:\n    default:\n      rotate.value -= speed;\n      if (rotate.value < 0) {\n        rotate.value += max;\n      }\n      break;\n  }\n  if (rotate.velocity && decay !== 1) {\n    rotate.velocity *= decay;\n  }\n}\nexport var AngleUpdater = /*#__PURE__*/function () {\n  function AngleUpdater(container) {\n    _classCallCheck(this, AngleUpdater);\n    this.container = container;\n  }\n  _createClass(AngleUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var rotateOptions = particle.options.rotate;\n      particle.rotate = {\n        enable: rotateOptions.animation.enable,\n        value: getRangeValue(rotateOptions.value) * Math.PI / 180\n      };\n      var rotateDirection = rotateOptions.direction;\n      if (rotateDirection === \"random\") {\n        var index = Math.floor(getRandom() * 2);\n        rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n      }\n      switch (rotateDirection) {\n        case \"counter-clockwise\":\n        case \"counterClockwise\":\n          particle.rotate.status = 1;\n          break;\n        case \"clockwise\":\n          particle.rotate.status = 0;\n          break;\n      }\n      var rotateAnimation = particle.options.rotate.animation;\n      if (rotateAnimation.enable) {\n        particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n        particle.rotate.velocity = getRangeValue(rotateAnimation.speed) / 360 * this.container.retina.reduceFactor;\n        if (!rotateAnimation.sync) {\n          particle.rotate.velocity *= getRandom();\n        }\n      }\n      particle.rotation = particle.rotate.value;\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var rotate = particle.options.rotate,\n        rotateAnimation = rotate.animation;\n      return !particle.destroyed && !particle.spawning && rotateAnimation.enable && !rotate.path;\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      var _a, _b;\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n      updateAngle(particle, delta);\n      particle.rotation = (_b = (_a = particle.rotate) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 0;\n    }\n  }]);\n  return AngleUpdater;\n}();","map":{"version":3,"names":["getRandom","getRangeValue","updateAngle","particle","delta","_a","_b","rotate","rotateOptions","options","rotateAnimation","animation","speed","velocity","factor","max","Math","PI","decay","enable","status","value","AngleUpdater","container","rotateDirection","direction","index","floor","retina","reduceFactor","sync","rotation","destroyed","spawning","path","isEnabled"],"sources":["C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/tsparticles-updater-angle/esm/AngleUpdater.js"],"sourcesContent":["import { getRandom, getRangeValue } from \"tsparticles-engine\";\nfunction updateAngle(particle, delta) {\n    var _a, _b;\n    const rotate = particle.rotate;\n    if (!rotate) {\n        return;\n    }\n    const rotateOptions = particle.options.rotate, rotateAnimation = rotateOptions.animation, speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor, max = 2 * Math.PI, decay = (_b = rotate.decay) !== null && _b !== void 0 ? _b : 1;\n    if (!rotateAnimation.enable) {\n        return;\n    }\n    switch (rotate.status) {\n        case 0:\n            rotate.value += speed;\n            if (rotate.value > max) {\n                rotate.value -= max;\n            }\n            break;\n        case 1:\n        default:\n            rotate.value -= speed;\n            if (rotate.value < 0) {\n                rotate.value += max;\n            }\n            break;\n    }\n    if (rotate.velocity && decay !== 1) {\n        rotate.velocity *= decay;\n    }\n}\nexport class AngleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: (getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (rotateDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.rotate.status = 1;\n                break;\n            case \"clockwise\":\n                particle.rotate.status = 0;\n                break;\n        }\n        const rotateAnimation = particle.options.rotate.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= getRandom();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate, rotateAnimation = rotate.animation;\n        return !particle.destroyed && !particle.spawning && rotateAnimation.enable && !rotate.path;\n    }\n    update(particle, delta) {\n        var _a, _b;\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateAngle(particle, delta);\n        particle.rotation = (_b = (_a = particle.rotate) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 0;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}