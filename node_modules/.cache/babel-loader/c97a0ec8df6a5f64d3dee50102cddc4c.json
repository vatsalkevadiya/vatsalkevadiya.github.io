{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vatsa/Downloads/React-Portfolio-master/React-Portfolio-master/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vatsa/Downloads/React-Portfolio-master/React-Portfolio-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/vatsa/Downloads/React-Portfolio-master/React-Portfolio-master/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vatsa/Downloads/React-Portfolio-master/React-Portfolio-master/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { downloadSvgImage, loadImage, replaceImageColor } from \"./Utils\";\nexport var ImageDrawer = /*#__PURE__*/function () {\n  function ImageDrawer() {\n    _classCallCheck(this, ImageDrawer);\n    this._images = [];\n  }\n  _createClass(ImageDrawer, [{\n    key: \"addImage\",\n    value: function addImage(container, image) {\n      var containerImages = this.getImages(container);\n      containerImages === null || containerImages === void 0 ? void 0 : containerImages.images.push(image);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._images = [];\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context, particle, radius, opacity) {\n      var _a;\n      var image = particle.image,\n        element = image === null || image === void 0 ? void 0 : image.element;\n      if (!element) {\n        return;\n      }\n      var ratio = (_a = image === null || image === void 0 ? void 0 : image.ratio) !== null && _a !== void 0 ? _a : 1,\n        pos = {\n          x: -radius,\n          y: -radius\n        };\n      context.globalAlpha = opacity;\n      context.drawImage(element, pos.x, pos.y, radius * 2, radius * 2 / ratio);\n      context.globalAlpha = 1;\n    }\n  }, {\n    key: \"getImages\",\n    value: function getImages(container) {\n      var containerImages = this._images.find(function (t) {\n        return t.id === container.id;\n      });\n      if (!containerImages) {\n        this._images.push({\n          id: container.id,\n          images: []\n        });\n        return this.getImages(container);\n      } else {\n        return containerImages;\n      }\n    }\n  }, {\n    key: \"getSidesCount\",\n    value: function getSidesCount() {\n      return 12;\n    }\n  }, {\n    key: \"loadShape\",\n    value: function loadShape(particle) {\n      var _this = this;\n      if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n        return;\n      }\n      var container = particle.container,\n        images = this.getImages(container).images,\n        imageData = particle.shapeData,\n        image = images.find(function (t) {\n          return t.source === imageData.src;\n        });\n      if (!image) {\n        this.loadImageShape(container, imageData).then(function () {\n          _this.loadShape(particle);\n        });\n        return;\n      }\n      if (image.error) {\n        return;\n      }\n    }\n  }, {\n    key: \"particleInit\",\n    value: function particleInit(container, particle) {\n      var _this2 = this;\n      var _a;\n      if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n        return;\n      }\n      var images = this.getImages(container).images,\n        imageData = particle.shapeData,\n        color = particle.getFillColor(),\n        replaceColor = (_a = imageData.replaceColor) !== null && _a !== void 0 ? _a : imageData.replace_color,\n        image = images.find(function (t) {\n          return t.source === imageData.src;\n        });\n      if (!image) {\n        return;\n      }\n      if (image.loading) {\n        setTimeout(function () {\n          _this2.particleInit(container, particle);\n        });\n        return;\n      }\n      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _a, _b, imageRes, fill, close, imageShape;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(image.svgData && replaceColor && color)) {\n                  _context.next = 6;\n                  break;\n                }\n                _context.next = 3;\n                return replaceImageColor(image, imageData, color, particle);\n              case 3:\n                imageRes = _context.sent;\n                _context.next = 7;\n                break;\n              case 6:\n                imageRes = {\n                  color: color,\n                  data: image,\n                  element: image.element,\n                  loaded: true,\n                  ratio: imageData.width / imageData.height,\n                  replaceColor: replaceColor,\n                  source: imageData.src\n                };\n              case 7:\n                if (!imageRes.ratio) {\n                  imageRes.ratio = 1;\n                }\n                fill = (_a = imageData.fill) !== null && _a !== void 0 ? _a : particle.fill, close = (_b = imageData.close) !== null && _b !== void 0 ? _b : particle.close, imageShape = {\n                  image: imageRes,\n                  fill: fill,\n                  close: close\n                };\n                particle.image = imageShape.image;\n                particle.fill = imageShape.fill;\n                particle.close = imageShape.close;\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  }, {\n    key: \"loadImageShape\",\n    value: function () {\n      var _loadImageShape = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(container, imageShape) {\n        var _a, source, image, imageFunc;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                source = imageShape.src;\n                if (source) {\n                  _context2.next = 3;\n                  break;\n                }\n                throw new Error(\"Error tsParticles - No image.src\");\n              case 3:\n                _context2.prev = 3;\n                image = {\n                  source: source,\n                  type: source.substring(source.length - 3),\n                  error: false,\n                  loading: true\n                };\n                this.addImage(container, image);\n                imageFunc = ((_a = imageShape.replaceColor) !== null && _a !== void 0 ? _a : imageShape.replace_color) ? downloadSvgImage : loadImage;\n                _context2.next = 9;\n                return imageFunc(image);\n              case 9:\n                _context2.next = 14;\n                break;\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](3);\n                throw new Error(\"tsParticles error - \".concat(imageShape.src, \" not found\"));\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 11]]);\n      }));\n      function loadImageShape(_x, _x2) {\n        return _loadImageShape.apply(this, arguments);\n      }\n      return loadImageShape;\n    }()\n  }]);\n  return ImageDrawer;\n}();","map":{"version":3,"names":["downloadSvgImage","loadImage","replaceImageColor","ImageDrawer","_images","container","image","containerImages","getImages","images","push","context","particle","radius","opacity","_a","element","ratio","pos","x","y","globalAlpha","drawImage","find","t","id","shape","imageData","shapeData","source","src","loadImageShape","then","loadShape","error","color","getFillColor","replaceColor","replace_color","loading","setTimeout","particleInit","svgData","imageRes","data","loaded","width","height","fill","close","_b","imageShape","Error","type","substring","length","addImage","imageFunc"],"sources":["C:/Users/vatsa/Downloads/React-Portfolio-master/React-Portfolio-master/node_modules/tsparticles-shape-image/esm/ImageDrawer.js"],"sourcesContent":["import { downloadSvgImage, loadImage, replaceImageColor } from \"./Utils\";\nexport class ImageDrawer {\n    constructor() {\n        this._images = [];\n    }\n    addImage(container, image) {\n        const containerImages = this.getImages(container);\n        containerImages === null || containerImages === void 0 ? void 0 : containerImages.images.push(image);\n    }\n    destroy() {\n        this._images = [];\n    }\n    draw(context, particle, radius, opacity) {\n        var _a;\n        const image = particle.image, element = image === null || image === void 0 ? void 0 : image.element;\n        if (!element) {\n            return;\n        }\n        const ratio = (_a = image === null || image === void 0 ? void 0 : image.ratio) !== null && _a !== void 0 ? _a : 1, pos = {\n            x: -radius,\n            y: -radius,\n        };\n        context.globalAlpha = opacity;\n        context.drawImage(element, pos.x, pos.y, radius * 2, (radius * 2) / ratio);\n        context.globalAlpha = 1;\n    }\n    getImages(container) {\n        const containerImages = this._images.find((t) => t.id === container.id);\n        if (!containerImages) {\n            this._images.push({\n                id: container.id,\n                images: [],\n            });\n            return this.getImages(container);\n        }\n        else {\n            return containerImages;\n        }\n    }\n    getSidesCount() {\n        return 12;\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        const container = particle.container, images = this.getImages(container).images, imageData = particle.shapeData, image = images.find((t) => t.source === imageData.src);\n        if (!image) {\n            this.loadImageShape(container, imageData).then(() => {\n                this.loadShape(particle);\n            });\n            return;\n        }\n        if (image.error) {\n            return;\n        }\n    }\n    particleInit(container, particle) {\n        var _a;\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        const images = this.getImages(container).images, imageData = particle.shapeData, color = particle.getFillColor(), replaceColor = (_a = imageData.replaceColor) !== null && _a !== void 0 ? _a : imageData.replace_color, image = images.find((t) => t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        (async () => {\n            var _a, _b;\n            let imageRes;\n            if (image.svgData && replaceColor && color) {\n                imageRes = await replaceImageColor(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    loaded: true,\n                    ratio: imageData.width / imageData.height,\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = (_a = imageData.fill) !== null && _a !== void 0 ? _a : particle.fill, close = (_b = imageData.close) !== null && _b !== void 0 ? _b : particle.close, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.fill = imageShape.fill;\n            particle.close = imageShape.close;\n        })();\n    }\n    async loadImageShape(container, imageShape) {\n        var _a;\n        const source = imageShape.src;\n        if (!source) {\n            throw new Error(\"Error tsParticles - No image.src\");\n        }\n        try {\n            const image = {\n                source: source,\n                type: source.substring(source.length - 3),\n                error: false,\n                loading: true,\n            };\n            this.addImage(container, image);\n            const imageFunc = ((_a = imageShape.replaceColor) !== null && _a !== void 0 ? _a : imageShape.replace_color) ? downloadSvgImage : loadImage;\n            await imageFunc(image);\n        }\n        catch (_b) {\n            throw new Error(`tsParticles error - ${imageShape.src} not found`);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}