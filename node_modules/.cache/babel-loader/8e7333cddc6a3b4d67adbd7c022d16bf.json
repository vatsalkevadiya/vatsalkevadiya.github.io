{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getStyleFromHsl } from \"tsparticles-engine\";\nvar currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n  var svgData = imageShape.svgData;\n  if (!svgData) {\n    return \"\";\n  }\n  var colorStyle = getStyleFromHsl(color, opacity);\n  if (svgData.includes(\"fill\")) {\n    return svgData.replace(currentColorRegex, function () {\n      return colorStyle;\n    });\n  }\n  var preFillIndex = svgData.indexOf(\">\");\n  return \"\".concat(svgData.substring(0, preFillIndex), \" fill=\\\"\").concat(colorStyle, \"\\\"\").concat(svgData.substring(preFillIndex));\n}\nexport function loadImage(_x) {\n  return _loadImage.apply(this, arguments);\n}\nfunction _loadImage() {\n  _loadImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(image) {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", new Promise(function (resolve) {\n              image.loading = true;\n              var img = new Image();\n              image.element = img;\n              img.addEventListener(\"load\", function () {\n                image.loading = false;\n                resolve();\n              });\n              img.addEventListener(\"error\", function () {\n                image.element = undefined;\n                image.error = true;\n                image.loading = false;\n                console.error(\"Error tsParticles - loading image: \".concat(image.source));\n                resolve();\n              });\n              img.src = image.source;\n            }));\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadImage.apply(this, arguments);\n}\nexport function downloadSvgImage(_x2) {\n  return _downloadSvgImage.apply(this, arguments);\n}\nfunction _downloadSvgImage() {\n  _downloadSvgImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(image) {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(image.type !== \"svg\")) {\n              _context3.next = 4;\n              break;\n            }\n            _context3.next = 3;\n            return loadImage(image);\n          case 3:\n            return _context3.abrupt(\"return\");\n          case 4:\n            image.loading = true;\n            _context3.next = 7;\n            return fetch(image.source);\n          case 7:\n            response = _context3.sent;\n            if (!response.ok) {\n              console.error(\"Error tsParticles - Image not found\");\n              image.error = true;\n            }\n            if (image.error) {\n              _context3.next = 13;\n              break;\n            }\n            _context3.next = 12;\n            return response.text();\n          case 12:\n            image.svgData = _context3.sent;\n          case 13:\n            image.loading = false;\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _downloadSvgImage.apply(this, arguments);\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n  var _a, _b, _c;\n  var svgColoredData = replaceColorSvg(image, color, (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1),\n    imageRes = {\n      color: color,\n      data: Object.assign(Object.assign({}, image), {\n        svgData: svgColoredData\n      }),\n      loaded: false,\n      ratio: imageData.width / imageData.height,\n      replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n      source: imageData.src\n    };\n  return new Promise(function (resolve) {\n    var svg = new Blob([svgColoredData], {\n        type: \"image/svg+xml\"\n      }),\n      domUrl = URL || window.URL || window.webkitURL || window,\n      url = domUrl.createObjectURL(svg),\n      img = new Image();\n    img.addEventListener(\"load\", function () {\n      imageRes.loaded = true;\n      imageRes.element = img;\n      resolve(imageRes);\n      domUrl.revokeObjectURL(url);\n    });\n    img.addEventListener(\"error\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var img2;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              domUrl.revokeObjectURL(url);\n              img2 = Object.assign(Object.assign({}, image), {\n                error: false,\n                loading: true\n              });\n              _context.next = 4;\n              return loadImage(img2);\n            case 4:\n              imageRes.loaded = true;\n              imageRes.element = img2.element;\n              resolve(imageRes);\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n    img.src = url;\n  });\n}","map":{"version":3,"names":["getStyleFromHsl","currentColorRegex","replaceColorSvg","imageShape","color","opacity","svgData","colorStyle","includes","replace","preFillIndex","indexOf","substring","loadImage","image","Promise","resolve","loading","img","Image","element","addEventListener","undefined","error","console","source","src","downloadSvgImage","type","fetch","response","ok","text","replaceImageColor","imageData","particle","_a","_b","_c","svgColoredData","value","imageRes","data","Object","assign","loaded","ratio","width","height","replaceColor","replace_color","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","revokeObjectURL","img2"],"sources":["C:/Users/vatsa/Downloads/React-Portfolio-master/Vatsal-Portfolio/node_modules/tsparticles-shape-image/esm/Utils.js"],"sourcesContent":["import { getStyleFromHsl } from \"tsparticles-engine\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = getStyleFromHsl(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            console.error(`Error tsParticles - loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexport async function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        console.error(\"Error tsParticles - Image not found\");\n        image.error = true;\n    }\n    if (!image.error) {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n    var _a, _b, _c;\n    const svgColoredData = replaceColorSvg(image, color, (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1), imageRes = {\n        color,\n        data: Object.assign(Object.assign({}, image), { svgData: svgColoredData }),\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n        source: imageData.src,\n    };\n    return new Promise((resolve) => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = Object.assign(Object.assign({}, image), { error: false, loading: true });\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        });\n        img.src = url;\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}