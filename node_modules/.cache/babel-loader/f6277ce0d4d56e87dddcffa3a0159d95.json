{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vatsa/Downloads/React-Portfolio-master/React-Portfolio-master/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vatsa/Downloads/React-Portfolio-master/React-Portfolio-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"C:/Users/vatsa/Downloads/React-Portfolio-master/React-Portfolio-master/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"C:/Users/vatsa/Downloads/React-Portfolio-master/React-Portfolio-master/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/vatsa/Downloads/React-Portfolio-master/React-Portfolio-master/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vatsa/Downloads/React-Portfolio-master/React-Portfolio-master/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { clear as _clear, drawParticle as _drawParticle, drawParticlePlugin as _drawParticlePlugin, drawPlugin as _drawPlugin, paintBase } from \"../Utils/CanvasUtils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { deepExtend } from \"../Utils/Utils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nfunction setTransformValue(factor, newFactor, key) {\n  var _a;\n  var newValue = newFactor[key];\n  if (newValue !== undefined) {\n    factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n  }\n}\nexport var Canvas = /*#__PURE__*/function () {\n  function Canvas(container) {\n    _classCallCheck(this, Canvas);\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this._context = null;\n    this._generatedCanvas = false;\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n  }\n  _createClass(Canvas, [{\n    key: \"clear\",\n    value: function clear() {\n      var _this = this;\n      var options = this.container.actualOptions,\n        trail = options.particles.move.trail;\n      if (options.backgroundMask.enable) {\n        this.paint();\n      } else if (trail.enable && trail.length > 0 && this._trailFillColor) {\n        this._paintBase(getStyleFromRgb(this._trailFillColor, 1 / trail.length));\n      } else {\n        this.draw(function (ctx) {\n          _clear(ctx, _this.size);\n        });\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this2 = this;\n      var _a;\n      if (this._generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      } else {\n        this._resetOriginalStyle();\n      }\n      this.draw(function (ctx) {\n        _clear(ctx, _this2.size);\n      });\n      this._preDrawUpdaters = [];\n      this._postDrawUpdaters = [];\n      this._resizePlugins = [];\n      this._colorPlugins = [];\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(cb) {\n      if (!this._context) {\n        return;\n      }\n      return cb(this._context);\n    }\n  }, {\n    key: \"drawParticle\",\n    value: function drawParticle(particle, delta) {\n      var _this3 = this;\n      var _a;\n      if (particle.spawning || particle.destroyed) {\n        return;\n      }\n      var radius = particle.getRadius();\n      if (radius <= 0) {\n        return;\n      }\n      var pfColor = particle.getFillColor(),\n        psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n      var _this$_getPluginParti = this._getPluginParticleColors(particle),\n        _this$_getPluginParti2 = _slicedToArray(_this$_getPluginParti, 2),\n        fColor = _this$_getPluginParti2[0],\n        sColor = _this$_getPluginParti2[1];\n      if (!fColor) {\n        fColor = pfColor;\n      }\n      if (!sColor) {\n        sColor = psColor;\n      }\n      if (!fColor && !sColor) {\n        return;\n      }\n      this.draw(function (ctx) {\n        var _a, _b, _c, _d, _e;\n        var options = _this3.container.actualOptions,\n          zIndexOptions = particle.options.zIndex,\n          zOpacityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.opacityRate),\n          opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1,\n          strokeOpacity = (_e = (_d = particle.stroke) === null || _d === void 0 ? void 0 : _d.opacity) !== null && _e !== void 0 ? _e : opacity,\n          zOpacity = opacity * zOpacityFactor,\n          zStrokeOpacity = strokeOpacity * zOpacityFactor,\n          transform = {},\n          colorStyles = {\n            fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined\n          };\n        colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n        _this3._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n        _drawParticle({\n          container: _this3.container,\n          context: ctx,\n          particle: particle,\n          delta: delta,\n          colorStyles: colorStyles,\n          backgroundMask: options.backgroundMask.enable,\n          composite: options.backgroundMask.composite,\n          radius: radius * Math.pow(1 - particle.zIndexFactor, zIndexOptions.sizeRate),\n          opacity: zOpacity,\n          shadow: particle.options.shadow,\n          transform: transform\n        });\n        _this3._applyPostDrawUpdaters(particle);\n      });\n    }\n  }, {\n    key: \"drawParticlePlugin\",\n    value: function drawParticlePlugin(plugin, particle, delta) {\n      this.draw(function (ctx) {\n        _drawParticlePlugin(ctx, plugin, particle, delta);\n      });\n    }\n  }, {\n    key: \"drawPlugin\",\n    value: function drawPlugin(plugin, delta) {\n      this.draw(function (ctx) {\n        _drawPlugin(ctx, plugin, delta);\n      });\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.resize();\n      this._initStyle();\n      this._initCover();\n      this._initTrail();\n      this.initBackground();\n      this.initUpdaters();\n      this.initPlugins();\n      this.paint();\n    }\n  }, {\n    key: \"initBackground\",\n    value: function initBackground() {\n      var options = this.container.actualOptions,\n        background = options.background,\n        element = this.element,\n        elementStyle = element === null || element === void 0 ? void 0 : element.style;\n      if (!elementStyle) {\n        return;\n      }\n      if (background.color) {\n        var color = rangeColorToRgb(background.color);\n        elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n      } else {\n        elementStyle.backgroundColor = \"\";\n      }\n      elementStyle.backgroundImage = background.image || \"\";\n      elementStyle.backgroundPosition = background.position || \"\";\n      elementStyle.backgroundRepeat = background.repeat || \"\";\n      elementStyle.backgroundSize = background.size || \"\";\n    }\n  }, {\n    key: \"initPlugins\",\n    value: function initPlugins() {\n      this._resizePlugins = [];\n      var _iterator = _createForOfIteratorHelper(this.container.plugins),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            plugin = _step$value[1];\n          if (plugin.resize) {\n            this._resizePlugins.push(plugin);\n          }\n          if (plugin.particleFillColor || plugin.particleStrokeColor) {\n            this._colorPlugins.push(plugin);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"initUpdaters\",\n    value: function initUpdaters() {\n      this._preDrawUpdaters = [];\n      this._postDrawUpdaters = [];\n      var _iterator2 = _createForOfIteratorHelper(this.container.particles.updaters),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var updater = _step2.value;\n          if (updater.afterDraw) {\n            this._postDrawUpdaters.push(updater);\n          }\n          if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n            this._preDrawUpdaters.push(updater);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"loadCanvas\",\n    value: function loadCanvas(canvas) {\n      var _a;\n      if (this._generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n      this._generatedCanvas = canvas.dataset && generatedAttribute in canvas.dataset ? canvas.dataset[generatedAttribute] === \"true\" : this._generatedCanvas;\n      this.element = canvas;\n      this._originalStyle = deepExtend({}, this.element.style);\n      this.size.height = canvas.offsetHeight;\n      this.size.width = canvas.offsetWidth;\n      this._context = this.element.getContext(\"2d\");\n      this.container.retina.init();\n      this.initBackground();\n    }\n  }, {\n    key: \"paint\",\n    value: function paint() {\n      var _this4 = this;\n      var options = this.container.actualOptions;\n      this.draw(function (ctx) {\n        if (options.backgroundMask.enable && options.backgroundMask.cover) {\n          _clear(ctx, _this4.size);\n          _this4._paintBase(_this4._coverColorStyle);\n        } else {\n          _this4._paintBase();\n        }\n      });\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (!this.element) {\n        return;\n      }\n      var container = this.container,\n        pxRatio = container.retina.pixelRatio,\n        size = container.canvas.size,\n        newSize = {\n          width: this.element.offsetWidth * pxRatio,\n          height: this.element.offsetHeight * pxRatio\n        };\n      if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n        return;\n      }\n      var oldSize = Object.assign({}, size);\n      this.element.width = size.width = this.element.offsetWidth * pxRatio;\n      this.element.height = size.height = this.element.offsetHeight * pxRatio;\n      if (this.container.started) {\n        this.resizeFactor = {\n          width: size.width / oldSize.width,\n          height: size.height / oldSize.height\n        };\n      }\n    }\n  }, {\n    key: \"windowResize\",\n    value: function () {\n      var _windowResize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var container, needsRefresh;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.element) {\n                  _context.next = 2;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 2:\n                this.resize();\n                container = this.container, needsRefresh = container.updateActualOptions();\n                container.particles.setDensity();\n                this._applyResizePlugins();\n                if (!needsRefresh) {\n                  _context.next = 9;\n                  break;\n                }\n                _context.next = 9;\n                return container.refresh();\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function windowResize() {\n        return _windowResize.apply(this, arguments);\n      }\n      return windowResize;\n    }()\n  }, {\n    key: \"_applyPostDrawUpdaters\",\n    value: function _applyPostDrawUpdaters(particle) {\n      var _a;\n      var _iterator3 = _createForOfIteratorHelper(this._postDrawUpdaters),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var updater = _step3.value;\n          (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"_applyPreDrawUpdaters\",\n    value: function _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n      var _a;\n      var _iterator4 = _createForOfIteratorHelper(this._preDrawUpdaters),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var updater = _step4.value;\n          if (updater.getColorStyles) {\n            var _updater$getColorStyl = updater.getColorStyles(particle, ctx, radius, zOpacity),\n              fill = _updater$getColorStyl.fill,\n              stroke = _updater$getColorStyl.stroke;\n            if (fill) {\n              colorStyles.fill = fill;\n            }\n            if (stroke) {\n              colorStyles.stroke = stroke;\n            }\n          }\n          if (updater.getTransformValues) {\n            var updaterTransform = updater.getTransformValues(particle);\n            for (var key in updaterTransform) {\n              setTransformValue(transform, updaterTransform, key);\n            }\n          }\n          (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"_applyResizePlugins\",\n    value: function _applyResizePlugins() {\n      var _a;\n      var _iterator5 = _createForOfIteratorHelper(this._resizePlugins),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var plugin = _step5.value;\n          (_a = plugin.resize) === null || _a === void 0 ? void 0 : _a.call(plugin);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"_getPluginParticleColors\",\n    value: function _getPluginParticleColors(particle) {\n      var fColor, sColor;\n      var _iterator6 = _createForOfIteratorHelper(this._colorPlugins),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var plugin = _step6.value;\n          if (!fColor && plugin.particleFillColor) {\n            fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n          }\n          if (!sColor && plugin.particleStrokeColor) {\n            sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n          }\n          if (fColor && sColor) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      return [fColor, sColor];\n    }\n  }, {\n    key: \"_initCover\",\n    value: function _initCover() {\n      var options = this.container.actualOptions,\n        cover = options.backgroundMask.cover,\n        color = cover.color,\n        coverRgb = rangeColorToRgb(color);\n      if (coverRgb) {\n        var coverColor = {\n          r: coverRgb.r,\n          g: coverRgb.g,\n          b: coverRgb.b,\n          a: cover.opacity\n        };\n        this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n      }\n    }\n  }, {\n    key: \"_initStyle\",\n    value: function _initStyle() {\n      var element = this.element,\n        options = this.container.actualOptions;\n      if (!element) {\n        return;\n      }\n      if (options.fullScreen.enable) {\n        this._originalStyle = deepExtend({}, element.style);\n        element.style.setProperty(\"position\", \"fixed\", \"important\");\n        element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n        element.style.setProperty(\"top\", \"0\", \"important\");\n        element.style.setProperty(\"left\", \"0\", \"important\");\n        element.style.setProperty(\"width\", \"100%\", \"important\");\n        element.style.setProperty(\"height\", \"100%\", \"important\");\n      } else {\n        this._resetOriginalStyle();\n      }\n      for (var key in options.style) {\n        if (!key || !options.style) {\n          continue;\n        }\n        var value = options.style[key];\n        if (!value) {\n          continue;\n        }\n        element.style.setProperty(key, value, \"important\");\n      }\n    }\n  }, {\n    key: \"_initTrail\",\n    value: function _initTrail() {\n      var options = this.container.actualOptions,\n        trail = options.particles.move.trail,\n        fillColor = rangeColorToRgb(trail.fillColor);\n      if (fillColor) {\n        var _trail = options.particles.move.trail;\n        this._trailFillColor = {\n          r: fillColor.r,\n          g: fillColor.g,\n          b: fillColor.b,\n          a: 1 / _trail.length\n        };\n      }\n    }\n  }, {\n    key: \"_paintBase\",\n    value: function _paintBase(baseColor) {\n      var _this5 = this;\n      this.draw(function (ctx) {\n        paintBase(ctx, _this5.size, baseColor);\n      });\n    }\n  }, {\n    key: \"_resetOriginalStyle\",\n    value: function _resetOriginalStyle() {\n      var element = this.element,\n        originalStyle = this._originalStyle;\n      if (element && originalStyle) {\n        element.style.position = originalStyle.position;\n        element.style.zIndex = originalStyle.zIndex;\n        element.style.top = originalStyle.top;\n        element.style.left = originalStyle.left;\n        element.style.width = originalStyle.width;\n        element.style.height = originalStyle.height;\n      }\n    }\n  }]);\n  return Canvas;\n}();","map":{"version":3,"names":["clear","drawParticle","drawParticlePlugin","drawPlugin","paintBase","getStyleFromHsl","getStyleFromRgb","rangeColorToHsl","rangeColorToRgb","deepExtend","generatedAttribute","setTransformValue","factor","newFactor","key","_a","newValue","undefined","Canvas","container","size","height","width","_context","_generatedCanvas","_preDrawUpdaters","_postDrawUpdaters","_resizePlugins","_colorPlugins","options","actualOptions","trail","particles","move","backgroundMask","enable","paint","length","_trailFillColor","_paintBase","draw","ctx","element","remove","_resetOriginalStyle","cb","particle","delta","spawning","destroyed","radius","getRadius","pfColor","getFillColor","psColor","getStrokeColor","_getPluginParticleColors","fColor","sColor","_b","_c","_d","_e","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","opacity","bubble","value","strokeOpacity","stroke","zOpacity","zStrokeOpacity","transform","colorStyles","fill","_applyPreDrawUpdaters","context","composite","sizeRate","shadow","_applyPostDrawUpdaters","plugin","resize","_initStyle","_initCover","_initTrail","initBackground","initUpdaters","initPlugins","background","elementStyle","style","color","backgroundColor","backgroundImage","image","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","plugins","push","particleFillColor","particleStrokeColor","updaters","updater","afterDraw","getColorStyles","getTransformValues","beforeDraw","canvas","dataset","_originalStyle","offsetHeight","offsetWidth","getContext","retina","init","cover","_coverColorStyle","pxRatio","pixelRatio","newSize","oldSize","Object","assign","started","resizeFactor","needsRefresh","updateActualOptions","setDensity","_applyResizePlugins","refresh","call","updaterTransform","coverRgb","coverColor","r","g","b","a","fullScreen","setProperty","toString","fillColor","baseColor","originalStyle","top","left"],"sources":["C:/Users/vatsa/Downloads/React-Portfolio-master/React-Portfolio-master/node_modules/tsparticles-engine/esm/Core/Canvas.js"],"sourcesContent":["import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase } from \"../Utils/CanvasUtils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { deepExtend } from \"../Utils/Utils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nfunction setTransformValue(factor, newFactor, key) {\n    var _a;\n    const newValue = newFactor[key];\n    if (newValue !== undefined) {\n        factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n    }\n}\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this._context = null;\n        this._generatedCanvas = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this._trailFillColor) {\n            this._paintBase(getStyleFromRgb(this._trailFillColor, 1 / trail.length));\n        }\n        else {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        var _a;\n        if (this._generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        this.draw((ctx) => {\n            clear(ctx, this.size);\n        });\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        if (!this._context) {\n            return;\n        }\n        return cb(this._context);\n    }\n    drawParticle(particle, delta) {\n        var _a;\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius();\n        if (radius <= 0) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            var _a, _b, _c, _d, _e;\n            const options = this.container.actualOptions, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1, strokeOpacity = (_e = (_d = particle.stroke) === null || _d === void 0 ? void 0 : _d.opacity) !== null && _e !== void 0 ? _e : opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n            };\n            colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            drawParticle({\n                container: this.container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform,\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => {\n            drawParticlePlugin(ctx, plugin, particle, delta);\n        });\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => {\n            drawPlugin(ctx, plugin, delta);\n        });\n    }\n    init() {\n        this.resize();\n        this._initStyle();\n        this._initCover();\n        this._initTrail();\n        this.initBackground();\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element, elementStyle = element === null || element === void 0 ? void 0 : element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = rangeColorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            if (plugin.particleFillColor || plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters) {\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        var _a;\n        if (this._generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this._generatedCanvas =\n            canvas.dataset && generatedAttribute in canvas.dataset\n                ? canvas.dataset[generatedAttribute] === \"true\"\n                : this._generatedCanvas;\n        this.element = canvas;\n        this._originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this._context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                this._paintBase(this._coverColorStyle);\n            }\n            else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio,\n        };\n        if (newSize.height === size.height &&\n            newSize.width === size.width &&\n            newSize.height === this.element.height &&\n            newSize.width === this.element.width) {\n            return;\n        }\n        const oldSize = Object.assign({}, size);\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n    }\n    async windowResize() {\n        if (!this.element) {\n            return;\n        }\n        this.resize();\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n    _applyPostDrawUpdaters(particle) {\n        var _a;\n        for (const updater of this._postDrawUpdaters) {\n            (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n        var _a;\n        for (const updater of this._preDrawUpdaters) {\n            if (updater.getColorStyles) {\n                const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                if (fill) {\n                    colorStyles.fill = fill;\n                }\n                if (stroke) {\n                    colorStyles.stroke = stroke;\n                }\n            }\n            if (updater.getTransformValues) {\n                const updaterTransform = updater.getTransformValues(particle);\n                for (const key in updaterTransform) {\n                    setTransformValue(transform, updaterTransform, key);\n                }\n            }\n            (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyResizePlugins() {\n        var _a;\n        for (const plugin of this._resizePlugins) {\n            (_a = plugin.resize) === null || _a === void 0 ? void 0 : _a.call(plugin);\n        }\n    }\n    _getPluginParticleColors(particle) {\n        let fColor, sColor;\n        for (const plugin of this._colorPlugins) {\n            if (!fColor && plugin.particleFillColor) {\n                fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n            }\n            if (!sColor && plugin.particleStrokeColor) {\n                sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n            }\n            if (fColor && sColor) {\n                break;\n            }\n        }\n        return [fColor, sColor];\n    }\n    _initCover() {\n        const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color, coverRgb = rangeColorToRgb(color);\n        if (coverRgb) {\n            const coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity,\n            };\n            this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n        }\n    }\n    _initStyle() {\n        const element = this.element, options = this.container.actualOptions;\n        if (!element) {\n            return;\n        }\n        if (options.fullScreen.enable) {\n            this._originalStyle = deepExtend({}, element.style);\n            element.style.setProperty(\"position\", \"fixed\", \"important\");\n            element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n            element.style.setProperty(\"top\", \"0\", \"important\");\n            element.style.setProperty(\"left\", \"0\", \"important\");\n            element.style.setProperty(\"width\", \"100%\", \"important\");\n            element.style.setProperty(\"height\", \"100%\", \"important\");\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        for (const key in options.style) {\n            if (!key || !options.style) {\n                continue;\n            }\n            const value = options.style[key];\n            if (!value) {\n                continue;\n            }\n            element.style.setProperty(key, value, \"important\");\n        }\n    }\n    _initTrail() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, fillColor = rangeColorToRgb(trail.fillColor);\n        if (fillColor) {\n            const trail = options.particles.move.trail;\n            this._trailFillColor = {\n                r: fillColor.r,\n                g: fillColor.g,\n                b: fillColor.b,\n                a: 1 / trail.length,\n            };\n        }\n    }\n    _paintBase(baseColor) {\n        this.draw((ctx) => {\n            paintBase(ctx, this.size, baseColor);\n        });\n    }\n    _resetOriginalStyle() {\n        const element = this.element, originalStyle = this._originalStyle;\n        if (element && originalStyle) {\n            element.style.position = originalStyle.position;\n            element.style.zIndex = originalStyle.zIndex;\n            element.style.top = originalStyle.top;\n            element.style.left = originalStyle.left;\n            element.style.width = originalStyle.width;\n            element.style.height = originalStyle.height;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}